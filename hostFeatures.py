import whois
from socket import gethostbyname, setdefaulttimeout
from shodan import Shodan
from urllib.parse import urlparse
from requests import get
from datetime import datetime
from re import compile
from json import dump, loads
from time import sleep
import waybackpy

class hostFeatures(object):
    def __init__(self,url,cache):
        self.url = url
        self.urlparse = urlparse(self.url)
        self.now = datetime.now()
        ## host
        try:
            setdefaulttimeout(10)
            self.host = self.urlparse.netloc if self.urlHostIsIP() else gethostbyname(self.urlparse.netloc)
        except:
            self.host = None
        ## whois,shodan,snapshots
        if self.host not in cache:
            try:
                self.whois = whois.whois(self.url)
            except:
                self.whois = {}

            try:
                api = Shodan()
                self.shodan = api.host(self.host)
            except:
                self.shodan = {}
            
            try:
                snaps = waybackpy.WaybackMachineCDXServerAPI(self.host).snapshots() if self.host else None
                self.snapshots = [snap.datetime_timestamp for snap in snaps]
            except:
                self.snapshots = []
            cache[self.host] = {'whois' : self.whois, 'shodan' : self.shodan, 'snapshots' : self.snapshots}
        else:
            self.whois = cache[self.host]['whois']
            self.shodan = cache[self.host]['shodan']
            self.snapshots = cache[self.host]['snapshots']

    def urlCreationDate(self):
        return self.whois.creation_date
    def urlExpDate(self):
        return self.whois.expiration_date
    def firstSeen(self):
        try:
            first = self.snapshots[0]
        except:
            first = datetime.now()
        return first
    def lastSeen(self):
        try:
            last = self.snapshots[-1]
        except:
            last = datetime.now()
        return last
    def urlHostIsIP(self):
        try: 
            host = self.urlparse.netloc
        except:
            host = None
        pattern = compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
        match = pattern.match(host) if host else None
        return match is not None
    def urlAge(self):
        try:
            days = (self.now - self.urlCreationDate()).days
        except:
            days = 0
        return days
    def urlIntendedLifeSpan(self):
        try:
            lifespan = (self.urlExpDate() - self.urlCreationDate()).days()
        except:
            lifespan = 0
        return lifespan
    def ttl(self):
        try:
            ttl = (self.firstSeen() - self.urlCreationDate()).days
        except:
            ttl = 0
        return ttl
    def totalUpdates(self):
        return len(self.snapshots)
    def connectionSpeed(self):
        try:
            cs = get(self.url, timeout=10).elapsed.total_seconds()
        except:
            cs = 0
        return cs
    def daysSinceLastSeen(self):
        dsls = (self.now - self.lastSeen()).days
        return dsls
    def numOfSubdomains(self):
        num1 = self.whois.get('nets', None)
        num2 = self.shodan.get('domains', None)
        num = num1 or num2
        return len(num) if num else 0
    def urlRegCountry(self):
        country = self.whois.get('country', None)
        return country if country else '-'
    def urlHostCountry(self):
        country = self.shodan.get('country_name', None)
        return country if country else '-'
    def numOpenPorts(self):
        ports = self.shodan.get('ports', None)
        return len(ports) if ports else 0
