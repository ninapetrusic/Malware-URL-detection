from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
import numpy as np
import pandas as pd
import sys
sys.path.append('..')
from filter_params import returnFilteredData

class randomForestOpt():
    def __init__(self, data):
        self.data = pd.DataFrame(data)
        self.treeData = self.data.drop(['url','class'], axis=1)
        x, y = self.treeData, self.data['class']
        le = preprocessing.LabelEncoder()
        for column in x.columns:
            if x[column].dtype == object:
                x[column] = le.fit_transform(x[column])
        ## 10% za testiranje, 90% za ucenje
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=None)
        ## broj decision trees u random forest
        n_estimators = [int(x) for x in np.linspace(200, 2000, 10)]
        ## maksimalni broj razina u svakom dt
        max_depth = [int(x) for x in np.linspace(10,110,11)]
        max_depth.append(None)
        ## minimalni broj uzoraka potreban za grananje
        min_samples_split = [2,5,10]
        ## minimalni broj uzoraka potreban u svakom čvoru
        min_samples_leaf = [1,2,4]
        ## izabiranje uzoraka za učenje svakog stabla
        bootstrap = [True, False]
        random_grid = {'n_estimators' : n_estimators,
                        'max_depth' : max_depth,
                        'min_samples_split' : min_samples_split,
                        'min_samples_leaf' : min_samples_leaf,
                        'bootstrap' : bootstrap}
        tree = RandomForestClassifier()
        tree.fit(x_train, y_train)
        y_pred = tree.predict(x_test)
        tree_random = RandomizedSearchCV(estimator=tree, param_distributions=random_grid, n_iter=100, cv=3, verbose=2, random_state=42,n_jobs=-1)
        tree_random.fit(x_train, y_train)
        y_pred_rand = tree_random.predict(x_test)
        print(accuracy_score(y_test, y_pred))
        print(accuracy_score(y_test, y_pred_rand))
        print(tree_random.best_params_)
        
data = returnFilteredData()
tree = randomForestOpt(data)