from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
import pandas as pd
import matplotlib.pyplot as plt

class decisionTree_opt():
    def __init__(self, data):
        max_depth, gini, entropy = [], [], []
        ## train data
        self.data = pd.DataFrame(data)
        self.treeData = self.data.drop(['url','class'], axis=1)
        for i in range(1,20):
            self.tree = tree.DecisionTreeClassifier(criterion="gini", max_depth=i)
            x, y = self.treeData, self.data['class']
            le = preprocessing.LabelEncoder()
            for column in x.columns:
                if x[column].dtype == object:
                    x[column] = le.fit_transform(x[column])
            ## 10% za testiranje, 90% za ucenje
            x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=None)
            self.tree = self.tree.fit(x_train, y_train)
            y_pred = self.tree.predict(x_test)
            print("Gini: Accuracy: %f, depth: %d" % (accuracy_score(y_test, y_pred), i))
            gini.append(accuracy_score(y_test, y_pred))
            max_depth.append(i)
        for i in range(1,20):
            self.tree = tree.DecisionTreeClassifier(criterion="entropy", max_depth=i)
            x, y = self.treeData, self.data['class']
            le = preprocessing.LabelEncoder()
            for column in x.columns:
                if x[column].dtype == object:
                    x[column] = le.fit_transform(x[column])
            ## 10% za testiranje, 90% za ucenje
            x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=None)
            self.tree = self.tree.fit(x_train, y_train)
            y_pred = self.tree.predict(x_test)
            print("Entropy: Accuracy: %f, depth: %d" % (accuracy_score(y_test, y_pred), i))
            entropy.append(accuracy_score(y_test, y_pred))
        visual = pd.DataFrame({'gini':pd.Series(gini), 'entropy':pd.Series(entropy), 'max_depth':pd.Series(max_depth)})
        plt.plot('max_depth','gini', data=visual, label='Gini')
        plt.plot('max_depth','entropy',data=visual,label='Entropy')
        plt.xlabel('Max depth')
        plt.ylabel('Accuracy')
        plt.legend()
        plt.savefig('criterion.png')