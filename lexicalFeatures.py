from urllib.parse import urlparse
from requests import get
from socket import gethostbyname
import math
from re import compile

class lexicalFeatures(object):
    def __init__(self, url):
        self.url = url
        self.urlparse = urlparse(self.url)
        try:
            self.host = gethostbyname(self.urlparse.netloc)
        except:
            self.host = None

    ## lexical features
    def numDigits(self):
        digits = [i for i in self.url if i.isdigit()]
        return len(digits)
    def urlLength(self):
        return len(self.url)
    def pathLength(self):
        return len(self.urlparse.path)
    def hostLength(self):
        return len(self.urlparse.netloc)
    def numParameters(self):
        params = self.urlparse.query
        return len(params.split("&")) - 1
    def numFragments(self):
        fragments = self.urlparse.fragment
        return len(fragments.split("#")) - 1
    def urlProtocol(self):
        sheme = self.urlparse.scheme
        return sheme if sheme else ''
    def hostIsIP(self):
        host = self.urlparse.netloc
        pattern = compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
        match = pattern.match(host)
        return match is not None
    def entropy(self):
        probs = [self.url.lower().count(c) / len(self.url.lower()) for c in set(self.url.lower())]
        return -sum([p * math.log(p) / math.log(2.0) for p in probs])
    def subdirs(self):
        return len(self.urlparse.path.split("/"))
    def client(self):
        return 'client' in self.url.lower()
    def login(self):
        return 'login' in self.url.lower()
    def admin(self):
        return 'admin' in self.url.lower()
    def server(self):
        return 'server' in self.url.lower()
    def periods(self):
        periods = [i for i in self.url if i == '.']
        return len(periods)
    def isEncoded(self):
        return '%' in self.url.lower()