from requests import get
from urllib.parse import urlparse
from socket import gethostbyname
from pyquery import PyQuery
from math import log

class contentFeatures(object):
    def __init__(self, url):
        self.url = url
        self.urlparse = urlparse(self.url)
        try:
            self.host = gethostbyname(self.urlparse.netloc)
        except:
            self.host = None
        try:
            html = get(self.url, timeout=5)
            self.html = str(html.text.encode('utf-8'))
        except:
            self.html = None
        try:
            self.scripts = PyQuery(self.html)('script')
        except:
            self.scripts = None
        
    def pageEntropy(self):
        probs = [self.html.lower().count(c) / len(self.html.lower()) 
                    for c in set(self.html.lower())] if self.html else None
        return -sum([p * log(p) / log(2.0) for p in probs]) if self.html else 0
    def numOfScripts(self):
        return len(self.scripts) if self.scripts else 0
    def scriptBodyRatio(self):
        return len(self.scripts)/len(self.html) if self.scripts else 0
    def htmlLen(self):
        return len(self.html) if self.html else 0
    def numOfHiddenTags(self):
        hidden = PyQuery(self.html)('.hidden') + PyQuery(self.html)('#hidden') + PyQuery(self.html)('*[visibility="none"]') + PyQuery(self.html)('*[display="none"]') if self.html else None
        return len(hidden) if hidden else 0
    def numIframes(self):
        frames = PyQuery(self.html)('iframe') + PyQuery(self.html)('frame') if self.html else 0
        return len(frames) if frames else 0
    def numEmbeds(self):
        embeds = PyQuery(self.html)('embed') if self.html else 0
        return len(embeds) if embeds else 0
    def numObjects(self):
        objects = PyQuery(self.html)('object') if self.html else 0
        return len(objects) if objects else 0
    def numLinks(self):
        hyperlinks = PyQuery(self.html)('a') if self.html else 0
        return len(hyperlinks) if hyperlinks else 0
    def numTags(self):
        return len(PyQuery(self.html)('*')) if self.html else 0
    def numIncludedElements(self):
        src = PyQuery(self.html)('script') + PyQuery(self.html)('iframe') + PyQuery(self.html)('frame') + PyQuery(self.html)('embed') + PyQuery(self.html)('form') + PyQuery(self.html)('object') if self.html else None
        src = [tag.attr('src') for tag in src.items() if tag.attr('src')] if src else None
        return len(src) if src else 0
    def numWhitespaces(self):
        whitesp = [i for i in self.html if i == ' '] if self.html else None
        return len(whitesp) if whitesp else 0
    def numEvalFunc(self):
        evals = ['eval' in script.text().lower() for script in self.scripts.items()] if self.scripts else None
        return len(evals) if evals else 0 
    def numSentences(self):
        sentences = str(self.html).split('.') if self.html else 0
        return len(sentences) if sentences != 0 else 0
    def avgScriptLen(self):
        scripts = [len(script.text()) for script in self.scripts.items()] if self.scripts else 0
        return sum(scripts)/len(scripts) if scripts != 0 else 0
    def avgScriptEntropy(self):
        entropy = []
        if self.scripts:
            for script in self.scripts.items():
                probs = [script.text().lower().count(c) / len(script.text()) for c in set(script.text())]
                entropy.append(-sum([p * log(p) / log(2.0) for p in probs if p != 0]))
            return sum(entropy) / len(self.scripts)
        else:
            return 0